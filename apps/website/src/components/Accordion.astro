---
import type { ImageMetadata } from "astro";
import LaptopFrame from "../assets/frames/laptop-frame.svg";
import TabletFrame from "../assets/frames/tablet-frame.svg";
import { Image } from "astro:assets";
import type { SVGComponent } from "../types";
import Lightbox from "./Lightbox.astro";

const frames = {
  laptop: {
    frame: LaptopFrame,
    inlet: { top: "6%", right: "11%", bottom: "9%", left: "11%" },
  },
  tablet: {
    frame: TabletFrame,
    inlet: { top: "7%", right: "3%", bottom: "3.5%", left: "3%" },
  },
};

type Props = {
  imageLeft?: boolean;
  frame: keyof typeof frames;
  items: {
    icon: SVGComponent;
    title: string;
    description: string;
    screenshot: string;
  }[];
};

const { imageLeft, frame, items } = Astro.props;
const { frame: Frame, inlet } = frames[frame];

const screenshots = import.meta.glob<{ default: ImageMetadata }>("/src/assets/screenshots/*.png");
const SCREENSHOT_PATH = "/src/assets/screenshots/";

items.forEach((item) => {
  const path = `${SCREENSHOT_PATH}${item.screenshot}`;
  if (!screenshots[path]) throw new Error(`"${path}" does not exist in glob: "${SCREENSHOT_PATH}*.png"`);
});
---

<style define:vars={{ "inlet-top": inlet.top, "inlet-right": inlet.right, "inlet-bottom": inlet.bottom, "inlet-left": inlet.left }}>
  .accordion {
    display: flex;
    gap: var(--spacing-md);
  }

  .accordion.imageLeft {
    flex-direction: row-reverse;
  }

  ul {
    display: flex;
    flex-direction: column;
    justify-content: center;
    padding: 0;
    margin: 0;
    list-style: none;
    flex-grow: 1;
  }

  li {
    display: grid;
    grid-template-columns: 4rem auto;
    grid-template-rows: 4rem auto;
  }

  li :global(*:first-child) {
    width: 2rem;
    height: 2rem;
    align-self: center;
    justify-self: center;
  }

  li:not(.active) p {
    visibility: hidden;
    height: 0;
  }

  li {
    cursor: pointer;
  }

  h3 {
    align-self: center;
    margin: 0;
  }

  p {
    cursor: text;
    margin: 0;
    grid-column: 2;
    grid-row: 2;
  }

  .display {
    display: flex;
    width: 63%;
    position: relative;
  }

  .display svg {
    width: 100%;
    height: auto;
    pointer-events: none;
    z-index: 2;
  }

  .screenshots {
    position: absolute;
    top: var(--inlet-top);
    right: var(--inlet-right);
    bottom: var(--inlet-bottom);
    left: var(--inlet-left);
    z-index: 1;
  }

  .screenshots img {
    display: block;
    width: 100%;
    height: 100%;
    object-fit: cover;
  }

  .screenshots img:not(.active) {
    display: none;
  }
</style>

<div class:list={["accordion", { imageLeft }]}>
  <ul>
    {
      items.map(({ icon: Icon, screenshot, title, description }) => (
        <li data-screenshot={screenshot}>
          <Icon />
          <h3>{title}</h3>
          <p>{description}</p>
        </li>
      ))
    }
  </ul>
  <div class="display">
    <Lightbox class="screenshots">
      {
        items.map(({ screenshot, title }) => (
          <Image src={screenshots[`${SCREENSHOT_PATH}${screenshot}`]()} alt={`${title} screenshot`} data-screenshot={screenshot} />
        ))
      }
    </Lightbox>
    <Frame />
  </div>
</div>

<script>
  const items = document.querySelectorAll(".accordion li");
  const ACTIVE_CLASS = "active";

  function setScreenshot(item: Element) {
    const screenshot = item.getAttribute("data-screenshot");
    const screenshots = item.closest(".accordion")?.querySelectorAll(".screenshots img");
    if (!screenshots) return;

    screenshots.forEach((s) => s.classList.remove(ACTIVE_CLASS));

    const targetScreenshot = Array.from(screenshots).find((s) => s.getAttribute("data-screenshot") === screenshot);
    if (targetScreenshot) targetScreenshot.classList.add(ACTIVE_CLASS);
  }

  function toggleAccordion(event: Event) {
    const item = event.currentTarget as HTMLLIElement;
    const siblings = item.closest(".accordion")?.querySelectorAll("li");
    const isActive = item.classList.contains(ACTIVE_CLASS);

    if (!isActive && siblings) {
      siblings.forEach((el) => el.classList.remove(ACTIVE_CLASS));
      item.classList.add(ACTIVE_CLASS);
      setScreenshot(item);
    }
  }

  items.forEach((item) => {
    item.addEventListener("click", toggleAccordion);
  });

  const firstItems = document.querySelectorAll(".accordion li:first-child");

  firstItems.forEach((item) => {
    item.classList.add(ACTIVE_CLASS);
    setScreenshot(item);
  });
</script>
