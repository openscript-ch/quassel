---
import type { ImageMetadata } from "astro";
import LaptopFrame from "../assets/frames/laptop-frame.svg";
import TabletFrame from "../assets/frames/tablet-frame.svg";
import type { JSX } from "astro/jsx-runtime";
import { Image } from "astro:assets";

const frames = {
  laptop: {
    frame: LaptopFrame,
    x: 0,
    y: 0,
  },
  tablet: {
    frame: TabletFrame,
    x: 0,
    y: 0,
  },
};

type Props = {
  imageLeft?: boolean;
  frame: keyof typeof frames;
  items: {
    icon: (props: JSX.SVGAttributes) => JSX.Element;
    title: string;
    description: string;
    screenshot: string;
  }[];
};

const { imageLeft, frame, items } = Astro.props;
const { frame: Frame, x, y } = frames[frame];

const screenshots = import.meta.glob<{ default: ImageMetadata }>("/src/assets/screenshots/*.png");
const screenshotPath = "/src/assets/screenshots/";

items.forEach((item) => {
  const path = `${screenshotPath}${item.screenshot}`;
  if (!screenshots[path]) throw new Error(`"${path}" does not exist in glob: "${screenshotPath}*.png"`);
});
---

<style>
  .accordion {
    display: flex;
  }

  .accordion.imageLeft {
    flex-direction: row-reverse;
  }

  ul {
    padding: 0;
    margin: 0;
    list-style: none;
    flex-grow: 1;
  }

  .display {
    flex-grow: 1;
  }

  li {
    display: grid;
    grid-template-columns: 4rem auto;
    grid-template-rows: 4rem auto;
  }

  li :global(*:first-child) {
    width: 2rem;
    height: 2rem;
    align-self: center;
    justify-self: center;
  }

  li:not(.active) p {
    visibility: hidden;
    height: 0;
  }

  li {
    cursor: pointer;
  }

  h3 {
    align-self: center;
    margin: 0;
  }

  p {
    cursor: text;
    margin: 0;
    grid-column: 2;
    grid-row: 2;
  }

  .screenshots img:not(.active) {
    display: none;
  }
</style>

<div class:list={["accordion", { imageLeft }]}>
  <ul>
    {
      items.map((item) => {
        const { icon: Icon, screenshot, title, description } = item;
        return (
          <li data-screenshot={screenshot}>
            <Icon />
            <h3>{title}</h3>
            <p>{description}</p>
          </li>
        );
      })
    }
  </ul>
  <div class="display">
    <Frame />
    <div class="screenshots">
      {
        items.map((item) => {
          return <Image src={screenshots[`${screenshotPath}${item.screenshot}`]()} alt="" data-screenshot={item.screenshot} />;
        })
      }
    </div>
  </div>
</div>

<script>
  const items = document.querySelectorAll(`.accordion li`);
  const ACTIVE_CLASS = "active";

  function setScreenshot(item: Element) {
    const screenshot = item.getAttribute("data-screenshot");
    const screenshots = item.closest(".accordion")?.querySelectorAll(".screenshots img");
    if (!screenshots) return;
    screenshots.forEach((s) => s.classList.remove(ACTIVE_CLASS));
    for (const s of screenshots) {
      if (s.getAttribute("data-screenshot") === screenshot) {
        s.classList.add(ACTIVE_CLASS);
        break;
      }
    };
  }

  function toggleAccordion(event: Event) {
    const item = event.currentTarget as HTMLLIElement;
    const siblings = item.closest(".accordion")?.querySelectorAll("li");
    const isActive = item.classList.contains(ACTIVE_CLASS);

    if (!isActive && siblings) {
      siblings.forEach((el) => el.classList.remove(ACTIVE_CLASS));
      item.classList.add(ACTIVE_CLASS);
      setScreenshot(item);
    }
  }

  items.forEach((item) => {
    item.addEventListener("click", toggleAccordion);
  });

  const firstItems = document.querySelectorAll(`.accordion li:first-child`);

  firstItems.forEach((item) => {
    item.classList.add(ACTIVE_CLASS);
    setScreenshot(item);
  });
</script>
