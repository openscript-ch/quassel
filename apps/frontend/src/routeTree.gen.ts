/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

// Import Routes

import { Route as rootRoute } from "./routes/__root";
import { Route as SessionImport } from "./routes/session";
import { Route as AuthImport } from "./routes/_auth";
import { Route as IndexImport } from "./routes/index";
import { Route as AuthQuestionnaireImport } from "./routes/_auth/questionnaire";
import { Route as AuthAdministrationImport } from "./routes/_auth/administration";
import { Route as AuthQuestionnaireIndexImport } from "./routes/_auth/questionnaire/index";
import { Route as AuthAdministrationIndexImport } from "./routes/_auth/administration/index";

// Create/Update Routes

const SessionRoute = SessionImport.update({
  path: "/session",
  getParentRoute: () => rootRoute,
} as any);

const AuthRoute = AuthImport.update({
  id: "/_auth",
  getParentRoute: () => rootRoute,
} as any);

const IndexRoute = IndexImport.update({
  path: "/",
  getParentRoute: () => rootRoute,
} as any);

const AuthQuestionnaireRoute = AuthQuestionnaireImport.update({
  path: "/questionnaire",
  getParentRoute: () => AuthRoute,
} as any);

const AuthAdministrationRoute = AuthAdministrationImport.update({
  path: "/administration",
  getParentRoute: () => AuthRoute,
} as any);

const AuthQuestionnaireIndexRoute = AuthQuestionnaireIndexImport.update({
  path: "/",
  getParentRoute: () => AuthQuestionnaireRoute,
} as any);

const AuthAdministrationIndexRoute = AuthAdministrationIndexImport.update({
  path: "/",
  getParentRoute: () => AuthAdministrationRoute,
} as any);

// Populate the FileRoutesByPath interface

declare module "@tanstack/react-router" {
  interface FileRoutesByPath {
    "/": {
      id: "/";
      path: "/";
      fullPath: "/";
      preLoaderRoute: typeof IndexImport;
      parentRoute: typeof rootRoute;
    };
    "/_auth": {
      id: "/_auth";
      path: "";
      fullPath: "";
      preLoaderRoute: typeof AuthImport;
      parentRoute: typeof rootRoute;
    };
    "/session": {
      id: "/session";
      path: "/session";
      fullPath: "/session";
      preLoaderRoute: typeof SessionImport;
      parentRoute: typeof rootRoute;
    };
    "/_auth/administration": {
      id: "/_auth/administration";
      path: "/administration";
      fullPath: "/administration";
      preLoaderRoute: typeof AuthAdministrationImport;
      parentRoute: typeof AuthImport;
    };
    "/_auth/questionnaire": {
      id: "/_auth/questionnaire";
      path: "/questionnaire";
      fullPath: "/questionnaire";
      preLoaderRoute: typeof AuthQuestionnaireImport;
      parentRoute: typeof AuthImport;
    };
    "/_auth/administration/": {
      id: "/_auth/administration/";
      path: "/";
      fullPath: "/administration/";
      preLoaderRoute: typeof AuthAdministrationIndexImport;
      parentRoute: typeof AuthAdministrationImport;
    };
    "/_auth/questionnaire/": {
      id: "/_auth/questionnaire/";
      path: "/";
      fullPath: "/questionnaire/";
      preLoaderRoute: typeof AuthQuestionnaireIndexImport;
      parentRoute: typeof AuthQuestionnaireImport;
    };
  }
}

// Create and export the route tree

interface AuthAdministrationRouteChildren {
  AuthAdministrationIndexRoute: typeof AuthAdministrationIndexRoute;
}

const AuthAdministrationRouteChildren: AuthAdministrationRouteChildren = {
  AuthAdministrationIndexRoute: AuthAdministrationIndexRoute,
};

const AuthAdministrationRouteWithChildren =
  AuthAdministrationRoute._addFileChildren(AuthAdministrationRouteChildren);

interface AuthQuestionnaireRouteChildren {
  AuthQuestionnaireIndexRoute: typeof AuthQuestionnaireIndexRoute;
}

const AuthQuestionnaireRouteChildren: AuthQuestionnaireRouteChildren = {
  AuthQuestionnaireIndexRoute: AuthQuestionnaireIndexRoute,
};

const AuthQuestionnaireRouteWithChildren =
  AuthQuestionnaireRoute._addFileChildren(AuthQuestionnaireRouteChildren);

interface AuthRouteChildren {
  AuthAdministrationRoute: typeof AuthAdministrationRouteWithChildren;
  AuthQuestionnaireRoute: typeof AuthQuestionnaireRouteWithChildren;
}

const AuthRouteChildren: AuthRouteChildren = {
  AuthAdministrationRoute: AuthAdministrationRouteWithChildren,
  AuthQuestionnaireRoute: AuthQuestionnaireRouteWithChildren,
};

const AuthRouteWithChildren = AuthRoute._addFileChildren(AuthRouteChildren);

export interface FileRoutesByFullPath {
  "/": typeof IndexRoute;
  "": typeof AuthRouteWithChildren;
  "/session": typeof SessionRoute;
  "/administration": typeof AuthAdministrationRouteWithChildren;
  "/questionnaire": typeof AuthQuestionnaireRouteWithChildren;
  "/administration/": typeof AuthAdministrationIndexRoute;
  "/questionnaire/": typeof AuthQuestionnaireIndexRoute;
}

export interface FileRoutesByTo {
  "/": typeof IndexRoute;
  "": typeof AuthRouteWithChildren;
  "/session": typeof SessionRoute;
  "/administration": typeof AuthAdministrationIndexRoute;
  "/questionnaire": typeof AuthQuestionnaireIndexRoute;
}

export interface FileRoutesById {
  __root__: typeof rootRoute;
  "/": typeof IndexRoute;
  "/_auth": typeof AuthRouteWithChildren;
  "/session": typeof SessionRoute;
  "/_auth/administration": typeof AuthAdministrationRouteWithChildren;
  "/_auth/questionnaire": typeof AuthQuestionnaireRouteWithChildren;
  "/_auth/administration/": typeof AuthAdministrationIndexRoute;
  "/_auth/questionnaire/": typeof AuthQuestionnaireIndexRoute;
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths:
    | "/"
    | ""
    | "/session"
    | "/administration"
    | "/questionnaire"
    | "/administration/"
    | "/questionnaire/";
  fileRoutesByTo: FileRoutesByTo;
  to: "/" | "" | "/session" | "/administration" | "/questionnaire";
  id:
    | "__root__"
    | "/"
    | "/_auth"
    | "/session"
    | "/_auth/administration"
    | "/_auth/questionnaire"
    | "/_auth/administration/"
    | "/_auth/questionnaire/";
  fileRoutesById: FileRoutesById;
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute;
  AuthRoute: typeof AuthRouteWithChildren;
  SessionRoute: typeof SessionRoute;
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthRoute: AuthRouteWithChildren,
  SessionRoute: SessionRoute,
};

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_auth",
        "/session"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_auth": {
      "filePath": "_auth.tsx",
      "children": [
        "/_auth/administration",
        "/_auth/questionnaire"
      ]
    },
    "/session": {
      "filePath": "session.tsx"
    },
    "/_auth/administration": {
      "filePath": "_auth/administration.tsx",
      "parent": "/_auth",
      "children": [
        "/_auth/administration/"
      ]
    },
    "/_auth/questionnaire": {
      "filePath": "_auth/questionnaire.tsx",
      "parent": "/_auth",
      "children": [
        "/_auth/questionnaire/"
      ]
    },
    "/_auth/administration/": {
      "filePath": "_auth/administration/index.tsx",
      "parent": "/_auth/administration"
    },
    "/_auth/questionnaire/": {
      "filePath": "_auth/questionnaire/index.tsx",
      "parent": "/_auth/questionnaire"
    }
  }
}
ROUTE_MANIFEST_END */
