/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all users */
        get: operations["UsersController_index"];
        put?: never;
        /** Create a user */
        post: operations["UsersController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a user by ID */
        get: operations["UsersController_get"];
        put?: never;
        post?: never;
        /** Delete a user by ID */
        delete: operations["UsersController_delete"];
        options?: never;
        head?: never;
        /** Update a user by ID */
        patch: operations["UsersController_update"];
        trace?: never;
    };
    "/session": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get the current session (who am I, ..) */
        get: operations["SessionController_get"];
        put?: never;
        /** Create a session (sign in, log in, ..) */
        post: operations["SessionController_create"];
        /** Delete a session (sign out, log out, ..) */
        delete: operations["SessionController_delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        UserCreationDto: {
            /**
             * @description The email of the user
             * @example administrator@example.ch
             */
            email: string;
            /**
             * @description The password of the user
             * @example quassel*1234
             */
            password: string;
            /**
             * @description The role of the user
             * @example ADMIN
             * @enum {string}
             */
            role?: "ASSISTANT" | "ADMIN";
        };
        UserResponseDto: {
            /**
             * @description The id of the user
             * @example 1
             */
            id: number;
            /**
             * @description The email of the user
             * @example administrator@example.ch
             */
            email: string;
            /**
             * @description The role of the user
             * @example ADMIN
             * @enum {string}
             */
            role?: "ASSISTANT" | "ADMIN";
        };
        ErrorResponseDto: {
            /** @description Status code of the error */
            statusCode: number;
            /** @description Descriptive message of the error */
            message: string;
            /** @description Error name */
            error?: string;
        };
        UserMutationDto: {
            /**
             * @description The email of the user
             * @example administrator@example.ch
             */
            email?: string;
            /**
             * @description The password of the user
             * @example quassel*1234
             */
            password?: string;
            /**
             * @description The role of the user
             * @example ADMIN
             * @enum {string}
             */
            role?: "ASSISTANT" | "ADMIN";
        };
        SessionCreationDto: {
            /**
             * @description The email of the user
             * @example administrator@example.ch
             */
            email: string;
            /**
             * @description The password of the user
             * @example quassel*1234
             */
            password: string;
        };
        SessionResponseDto: {
            /**
             * @description The id of the user
             * @example 1
             */
            id: number;
            /**
             * @description The email of the user
             * @example administrator@example.ch
             */
            email: string;
            /**
             * @description The role of the user
             * @example ADMIN
             * @enum {string}
             */
            role?: "ASSISTANT" | "ADMIN";
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    UsersController_index: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserResponseDto"][];
                };
            };
        };
    };
    UsersController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserCreationDto"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserResponseDto"];
                };
            };
            /** @description Unique email constraint violation */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponseDto"];
                };
            };
        };
    };
    UsersController_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>;
                };
            };
        };
    };
    UsersController_delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    UsersController_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserMutationDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>;
                };
            };
        };
    };
    SessionController_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Current session */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SessionResponseDto"];
                };
            };
            /** @description Provided credentials are invalid */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponseDto"];
                };
            };
        };
    };
    SessionController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SessionCreationDto"];
            };
        };
        responses: {
            /** @description Signed in */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SessionResponseDto"];
                };
            };
            /** @description Provided credentials are invalid */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponseDto"];
                };
            };
        };
    };
    SessionController_delete: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Signed out */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponseDto"];
                };
            };
        };
    };
}
