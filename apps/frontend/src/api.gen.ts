/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all users */
        get: operations["UsersController_index"];
        put?: never;
        /** Create a user */
        post: operations["UsersController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a user by ID */
        get: operations["UsersController_get"];
        put?: never;
        post?: never;
        /** Delete a user by ID */
        delete: operations["UsersController_delete"];
        options?: never;
        head?: never;
        /** Update a user by ID */
        patch: operations["UsersController_update"];
        trace?: never;
    };
    "/session": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get the current session (who am I, ..) */
        get: operations["SessionController_get"];
        put?: never;
        /** Create a session (sign in, log in, ..) */
        post: operations["SessionController_create"];
        /** Delete a session (sign out, log out, ..) */
        delete: operations["SessionController_delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Returns the backends health information */
        get: operations["HealthController_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Returns the backends status information */
        get: operations["StatusController_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/export": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Offers the backends data for download */
        get: operations["ExportController_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/reports": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Offers the backends data for download */
        get: operations["ReportsController_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/carers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all carers */
        get: operations["CarersController_index"];
        put?: never;
        /** Create a carer */
        post: operations["CarersController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/carers/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a carer by ID */
        get: operations["CarersController_get"];
        put?: never;
        post?: never;
        /** Delete a carer by ID */
        delete: operations["CarersController_delete"];
        options?: never;
        head?: never;
        /** Update a carer by ID */
        patch: operations["CarersController_update"];
        trace?: never;
    };
    "/languages": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all languages */
        get: operations["LanguagesController_index"];
        put?: never;
        /** Create a language */
        post: operations["LanguagesController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/languages/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a language by ID */
        get: operations["LanguagesController_get"];
        put?: never;
        post?: never;
        /** Delete a language by ID */
        delete: operations["LanguagesController_delete"];
        options?: never;
        head?: never;
        /** Update a language by ID */
        patch: operations["LanguagesController_update"];
        trace?: never;
    };
    "/participants": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all participants */
        get: operations["ParticipantsController_index"];
        put?: never;
        /** Create a participant */
        post: operations["ParticipantsController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/participants/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a participant by ID */
        get: operations["ParticipantsController_get"];
        put?: never;
        post?: never;
        /** Delete a participant by ID */
        delete: operations["ParticipantsController_delete"];
        options?: never;
        head?: never;
        /** Update a participant by ID */
        patch: operations["ParticipantsController_update"];
        trace?: never;
    };
    "/participants/{id}/entry-templates": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Uniquely grouped entries by ratio, carer and language, that are used as templates when creating new entries for a participant. */
        get: operations["ParticipantsController_entryTemplates"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/entries": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all entries */
        get: operations["EntriesController_index"];
        put?: never;
        /** Create a entry */
        post: operations["EntriesController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/entries/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a entry by ID */
        get: operations["EntriesController_get"];
        put?: never;
        post?: never;
        /** Delete a entry by ID */
        delete: operations["EntriesController_delete"];
        options?: never;
        head?: never;
        /** Update a entry by ID */
        patch: operations["EntriesController_update"];
        trace?: never;
    };
    "/questionnaires": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all questionnairess */
        get: operations["QuestionnairesController_index"];
        put?: never;
        /** Create a questionnaires */
        post: operations["QuestionnairesController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/questionnaires/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a questionnaires by ID */
        get: operations["QuestionnairesController_get"];
        put?: never;
        post?: never;
        /** Delete a questionnaires by ID */
        delete: operations["QuestionnairesController_delete"];
        options?: never;
        head?: never;
        /** Update a questionnaires by ID */
        patch: operations["QuestionnairesController_update"];
        trace?: never;
    };
    "/entry-languages": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all entry languages */
        get: operations["EntryLanguagesController_index"];
        put?: never;
        /** Create an entry language */
        post: operations["EntryLanguagesController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/entry-languages/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get an entry language by ID */
        get: operations["EntryLanguagesController_get"];
        put?: never;
        post?: never;
        /** Delete an entry language by ID */
        delete: operations["EntryLanguagesController_delete"];
        options?: never;
        head?: never;
        /** Update an entry language by ID */
        patch: operations["EntryLanguagesController_update"];
        trace?: never;
    };
    "/studies": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all studies */
        get: operations["StudiesController_index"];
        put?: never;
        /** Create a study */
        post: operations["StudiesController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/studies/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a study by ID */
        get: operations["StudiesController_get"];
        put?: never;
        post?: never;
        /** Delete a study by ID */
        delete: operations["StudiesController_delete"];
        options?: never;
        head?: never;
        /** Update a study by ID */
        patch: operations["StudiesController_update"];
        trace?: never;
    };
    "/study-participants": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create a study */
        post: operations["StudyParticipantsController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        UserCreationDto: {
            /**
             * Format: email
             * @description The email of the user
             * @example admin@example.com
             */
            email: string;
            /**
             * @description The role of the user
             * @example ADMIN
             * @enum {string}
             */
            role?: "ASSISTANT" | "ADMIN";
            /**
             * @description The password of the user
             * @example Quassel*1234
             */
            password: string;
        };
        UserResponseDto: {
            /**
             * Format: email
             * @description The email of the user
             * @example admin@example.com
             */
            email: string;
            /**
             * @description The role of the user
             * @example ADMIN
             * @enum {string}
             */
            role?: "ASSISTANT" | "ADMIN";
            /**
             * @description The id of the user
             * @example 1
             */
            id: number;
        };
        ErrorResponseDto: {
            /** @description Status code of the error */
            statusCode: number;
            /** @description Descriptive message of the error */
            message: string;
            /** @description Error name */
            error?: string;
        };
        UserMutationDto: {
            /**
             * Format: email
             * @description The email of the user
             * @example admin@example.com
             */
            email?: string;
            /**
             * @description The role of the user
             * @example ADMIN
             * @enum {string}
             */
            role?: "ASSISTANT" | "ADMIN";
            /**
             * @description The password of the user
             * @example Quassel*1234
             */
            password?: string;
        };
        SessionCreationDto: {
            /**
             * Format: email
             * @description The email of the user
             * @example admin@example.com
             */
            email: string;
            /**
             * @description The password of the user
             * @example Quassel*1234
             */
            password: string;
        };
        SessionResponseDto: {
            /**
             * Format: email
             * @description The email of the user
             * @example admin@example.com
             */
            email: string;
            /**
             * @description The role of the user
             * @example ADMIN
             * @enum {string}
             */
            role?: "ASSISTANT" | "ADMIN";
            /**
             * @description The id of the user
             * @example 1
             */
            id: number;
            /**
             * @description Expiration time of authentication
             * @example 1737029456
             */
            expiresAt: number;
        };
        /** @enum {string} */
        ExportType: "csv" | "sql";
        CarerCreationDto: {
            /**
             * @description The name of the carer
             * @example Grandmother
             */
            name: string;
            /**
             * @description The color used to display entries in the calendar
             * @example #ffffff
             */
            color?: string;
            participant?: number;
        };
        QuestionnaireResponseDto: {
            /**
             * Format: date-time
             * @description The starting date of the questionnaire
             * @example 2024-11-01T07:00:00.000Z
             */
            startedAt: string;
            /**
             * Format: date-time
             * @description The ending date of the questionnaire
             * @example 2024-11-01T08:00:00.00Z
             */
            endedAt: string;
            /**
             * @description The title of the questionnaire
             * @example First few months
             */
            title: string;
            /**
             * @description The remark of the questionnaire
             * @example We went on holidays for 2 weeks and only spoke Esperanto
             */
            remark?: string;
            /**
             * Format: date-time
             * @description The date the questionnaire was completed
             * @example 2024-11-01T07:00:00.000Z
             */
            completedAt?: string;
            /**
             * @description The id of the questionnaire
             * @example 1
             */
            id: number;
            /**
             * Format: date-time
             * @description The date the questionnaire was created
             * @example 2024-11-01T07:00:00.000Z
             */
            createdAt: string;
            participant: components["schemas"]["ParticipantResponseDto"];
        };
        ParticipantResponseDto: {
            /**
             * @description The id of the participant (child id)
             * @example 1
             */
            id: number;
            /**
             * Format: date-time
             * @description The birthday of the participant
             * @example 2024-11-01T00:05:02.718Z
             */
            birthday?: string;
            latestQuestionnaire?: components["schemas"]["QuestionnaireResponseDto"];
        };
        CarerResponseDto: {
            /**
             * @description The name of the carer
             * @example Grandmother
             */
            name: string;
            /**
             * @description The color used to display entries in the calendar
             * @example #ffffff
             */
            color?: string;
            /**
             * @description The id of the carer
             * @example 1
             */
            id: number;
            participant?: components["schemas"]["ParticipantResponseDto"];
        };
        CarerMutationDto: {
            /**
             * @description The name of the carer
             * @example Grandmother
             */
            name?: string;
            /**
             * @description The color used to display entries in the calendar
             * @example #ffffff
             */
            color?: string;
            participant?: number;
        };
        LanguageCreationDto: {
            /**
             * @description The name of the language
             * @example Deutsch
             */
            name: string;
            /**
             * @description The IETF BCP 47 code of the language
             * @example de-DE
             */
            ietfBcp47?: string;
            participant?: number;
        };
        LanguageResponseDto: {
            /**
             * @description The name of the language
             * @example Deutsch
             */
            name: string;
            /**
             * @description The IETF BCP 47 code of the language
             * @example de-DE
             */
            ietfBcp47?: string;
            /**
             * @description The id of the language
             * @example 1
             */
            id: number;
            participant?: components["schemas"]["ParticipantResponseDto"];
        };
        LanguageMutationDto: {
            /**
             * @description The name of the language
             * @example Deutsch
             */
            name?: string;
            /**
             * @description The IETF BCP 47 code of the language
             * @example de-DE
             */
            ietfBcp47?: string;
            participant?: number;
        };
        ParticipantCreationDto: {
            /**
             * @description The id of the participant (child id)
             * @example 1
             */
            id: number;
            /**
             * Format: date-time
             * @description The birthday of the participant
             * @example 2024-11-01T00:05:02.718Z
             */
            birthday?: string;
        };
        /** @enum {string} */
        ParticipantSortableField: "id" | "birthday";
        /** @enum {string} */
        SortOrder: "ASC" | "DESC";
        EntryLanguageResponseDto: {
            /**
             * @description The ratio in percent of the entry language
             * @example 50
             */
            ratio: number;
            /**
             * @description The id of the entry language
             * @example 1
             */
            id: number;
            language: components["schemas"]["LanguageResponseDto"];
        };
        EntryTemplateDto: {
            carer: components["schemas"]["CarerResponseDto"];
            entryLanguages: components["schemas"]["EntryLanguageResponseDto"][];
        };
        ParticipantMutationDto: {
            /**
             * @description The id of the participant (child id)
             * @example 1
             */
            id?: number;
            /**
             * Format: date-time
             * @description The birthday of the participant
             * @example 2024-11-01T00:05:02.718Z
             */
            birthday?: string;
        };
        EntryLanguageCreationDto: {
            /**
             * @description The ratio in percent of the entry language
             * @example 50
             */
            ratio: number;
            language?: number;
        };
        EntryCreationDto: {
            /**
             * @description The starting date of the entry
             * @example 2024-11-01T07:00:00.000Z
             */
            startedAt: string;
            /**
             * @description The ending date of the entry
             * @example 2024-11-01T08:00:00.00Z
             */
            endedAt: string;
            /**
             * @description The weekday of the entry (Sunday is 0 like in JS)
             * @example 1
             */
            weekday: number;
            /**
             * @description The weekly recurring of the entry
             * @example 1
             */
            weeklyRecurring?: number;
            carer: number;
            questionnaire: number;
            entryLanguages: components["schemas"]["EntryLanguageCreationDto"][];
        };
        EntryResponseDto: {
            /**
             * @description The starting date of the entry
             * @example 2024-11-01T07:00:00.000Z
             */
            startedAt: string;
            /**
             * @description The ending date of the entry
             * @example 2024-11-01T08:00:00.00Z
             */
            endedAt: string;
            /**
             * @description The weekday of the entry (Sunday is 0 like in JS)
             * @example 1
             */
            weekday: number;
            /**
             * @description The weekly recurring of the entry
             * @example 1
             */
            weeklyRecurring?: number;
            /**
             * @description The id of the entry
             * @example 1
             */
            id: number;
            carer: components["schemas"]["CarerResponseDto"];
            entryLanguages: components["schemas"]["EntryLanguageResponseDto"][];
        };
        EntryMutationDto: {
            /**
             * @description The starting date of the entry
             * @example 2024-11-01T07:00:00.000Z
             */
            startedAt?: string;
            /**
             * @description The ending date of the entry
             * @example 2024-11-01T08:00:00.00Z
             */
            endedAt?: string;
            /**
             * @description The weekday of the entry (Sunday is 0 like in JS)
             * @example 1
             */
            weekday?: number;
            /**
             * @description The weekly recurring of the entry
             * @example 1
             */
            weeklyRecurring?: number;
            carer?: number;
            questionnaire?: number;
            entryLanguages?: components["schemas"]["EntryLanguageCreationDto"][];
        };
        QuestionnaireCreationDto: {
            /**
             * Format: date-time
             * @description The starting date of the questionnaire
             * @example 2024-11-01T07:00:00.000Z
             */
            startedAt: string;
            /**
             * Format: date-time
             * @description The ending date of the questionnaire
             * @example 2024-11-01T08:00:00.00Z
             */
            endedAt: string;
            /**
             * @description The title of the questionnaire
             * @example First few months
             */
            title: string;
            /**
             * @description The remark of the questionnaire
             * @example We went on holidays for 2 weeks and only spoke Esperanto
             */
            remark?: string;
            /**
             * Format: date-time
             * @description The date the questionnaire was completed
             * @example 2024-11-01T07:00:00.000Z
             */
            completedAt?: string;
            participant: number;
        };
        /** @enum {string} */
        QuestionnaireSortableField: "createdAt" | "completedAt";
        QuestionnaireDetailResponseDto: {
            /**
             * Format: date-time
             * @description The starting date of the questionnaire
             * @example 2024-11-01T07:00:00.000Z
             */
            startedAt: string;
            /**
             * Format: date-time
             * @description The ending date of the questionnaire
             * @example 2024-11-01T08:00:00.00Z
             */
            endedAt: string;
            /**
             * @description The title of the questionnaire
             * @example First few months
             */
            title: string;
            /**
             * @description The remark of the questionnaire
             * @example We went on holidays for 2 weeks and only spoke Esperanto
             */
            remark?: string;
            /**
             * Format: date-time
             * @description The date the questionnaire was completed
             * @example 2024-11-01T07:00:00.000Z
             */
            completedAt?: string;
            /**
             * @description The id of the questionnaire
             * @example 1
             */
            id: number;
            /**
             * Format: date-time
             * @description The date the questionnaire was created
             * @example 2024-11-01T07:00:00.000Z
             */
            createdAt: string;
            participant: components["schemas"]["ParticipantResponseDto"];
            entries: components["schemas"]["EntryResponseDto"][];
        };
        QuestionnaireMutationDto: {
            /**
             * Format: date-time
             * @description The starting date of the questionnaire
             * @example 2024-11-01T07:00:00.000Z
             */
            startedAt?: string;
            /**
             * Format: date-time
             * @description The ending date of the questionnaire
             * @example 2024-11-01T08:00:00.00Z
             */
            endedAt?: string;
            /**
             * @description The title of the questionnaire
             * @example First few months
             */
            title?: string;
            /**
             * @description The remark of the questionnaire
             * @example We went on holidays for 2 weeks and only spoke Esperanto
             */
            remark?: string;
            /**
             * Format: date-time
             * @description The date the questionnaire was completed
             * @example 2024-11-01T07:00:00.000Z
             */
            completedAt?: string;
            participant?: number;
        };
        EntryLanguageMutationDto: {
            /**
             * @description The ratio in percent of the entry language
             * @example 50
             */
            ratio: number;
            language?: number;
            id?: number;
        };
        StudyCreationDto: {
            /**
             * @description The id of the study (child id)
             * @example 1
             */
            id: number;
            /**
             * @description The title of the study
             * @example Series 1
             */
            title: string;
        };
        StudyResponseDto: {
            /**
             * @description The id of the study (child id)
             * @example 1
             */
            id: number;
            /**
             * @description The title of the study
             * @example Series 1
             */
            title: string;
            /**
             * @description The count of participants assigned to this study
             * @example 1
             */
            participantsCount?: number;
        };
        StudyDetailResponseDto: {
            /**
             * @description The id of the study (child id)
             * @example 1
             */
            id: number;
            /**
             * @description The title of the study
             * @example Series 1
             */
            title: string;
            /**
             * @description The count of participants assigned to this study
             * @example 1
             */
            participantsCount?: number;
            participants: components["schemas"]["ParticipantResponseDto"][];
        };
        StudyMutationDto: {
            /**
             * @description The id of the study (child id)
             * @example 1
             */
            id?: number;
            /**
             * @description The title of the study
             * @example Series 1
             */
            title?: string;
        };
        StudyParticipantMutationDto: {
            /**
             * @description The id of the participant
             * @example 1
             */
            participantId: number;
            /**
             * @description The id of the study
             * @example 1
             */
            studyId: number;
        };
        StudyParticipantResponseDto: {
            /**
             * @description The id of the participant
             * @example 1
             */
            participantId: number;
            /**
             * @description The id of the study
             * @example 1
             */
            studyId: number;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    UsersController_index: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserResponseDto"][];
                };
            };
        };
    };
    UsersController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserCreationDto"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserResponseDto"];
                };
            };
            /** @description Unique email constraint violation */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponseDto"];
                };
            };
        };
    };
    UsersController_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserResponseDto"];
                };
            };
        };
    };
    UsersController_delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    UsersController_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserMutationDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserResponseDto"];
                };
            };
        };
    };
    SessionController_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Current session */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SessionResponseDto"];
                };
            };
            /** @description Provided credentials are invalid */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponseDto"];
                };
            };
        };
    };
    SessionController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SessionCreationDto"];
            };
        };
        responses: {
            /** @description Signed in */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SessionResponseDto"];
                };
            };
            /** @description Provided credentials are invalid */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponseDto"];
                };
            };
        };
    };
    SessionController_delete: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Signed out */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponseDto"];
                };
            };
        };
    };
    HealthController_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The Health Check is successful */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example ok */
                        status?: string;
                        /** @example {
                         *       "database": {
                         *         "status": "up"
                         *       }
                         *     } */
                        info?: {
                            [key: string]: {
                                status: string;
                            } & {
                                [key: string]: unknown;
                            };
                        } | null;
                        /** @example {} */
                        error?: {
                            [key: string]: {
                                status: string;
                            } & {
                                [key: string]: unknown;
                            };
                        } | null;
                        /** @example {
                         *       "database": {
                         *         "status": "up"
                         *       }
                         *     } */
                        details?: {
                            [key: string]: {
                                status: string;
                            } & {
                                [key: string]: unknown;
                            };
                        };
                    };
                };
            };
            /** @description The Health Check is not successful */
            503: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example error */
                        status?: string;
                        /** @example {
                         *       "database": {
                         *         "status": "up"
                         *       }
                         *     } */
                        info?: {
                            [key: string]: {
                                status: string;
                            } & {
                                [key: string]: unknown;
                            };
                        } | null;
                        /** @example {
                         *       "redis": {
                         *         "status": "down",
                         *         "message": "Could not connect"
                         *       }
                         *     } */
                        error?: {
                            [key: string]: {
                                status: string;
                            } & {
                                [key: string]: unknown;
                            };
                        } | null;
                        /** @example {
                         *       "database": {
                         *         "status": "up"
                         *       },
                         *       "redis": {
                         *         "status": "down",
                         *         "message": "Could not connect"
                         *       }
                         *     } */
                        details?: {
                            [key: string]: {
                                status: string;
                            } & {
                                [key: string]: unknown;
                            };
                        };
                    };
                };
            };
        };
    };
    StatusController_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ExportController_get: {
        parameters: {
            query?: {
                type?: components["schemas"]["ExportType"];
                studyId?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Database dump file */
            200: {
                headers: {
                    /** @description Attachment dump */
                    "Content-Disposition"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
        };
    };
    ReportsController_get: {
        parameters: {
            query: {
                studyId: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Report file */
            200: {
                headers: {
                    /** @description Report */
                    "Content-Disposition"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "text/csv": string;
                };
            };
        };
    };
    CarersController_index: {
        parameters: {
            query?: {
                participantId?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CarerResponseDto"][];
                };
            };
        };
    };
    CarersController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CarerCreationDto"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CarerResponseDto"];
                };
            };
            /** @description Unique name constraint violation */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponseDto"];
                };
            };
        };
    };
    CarersController_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CarerResponseDto"];
                };
            };
        };
    };
    CarersController_delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    CarersController_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CarerMutationDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CarerResponseDto"];
                };
            };
        };
    };
    LanguagesController_index: {
        parameters: {
            query?: {
                participantId?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LanguageResponseDto"][];
                };
            };
        };
    };
    LanguagesController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LanguageCreationDto"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LanguageResponseDto"];
                };
            };
            /** @description Unique name constraint violation */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponseDto"];
                };
            };
        };
    };
    LanguagesController_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LanguageResponseDto"];
                };
            };
        };
    };
    LanguagesController_delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    LanguagesController_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LanguageMutationDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LanguageResponseDto"];
                };
            };
        };
    };
    ParticipantsController_index: {
        parameters: {
            query?: {
                /** @description Field to sort by */
                sortBy?: components["schemas"]["ParticipantSortableField"];
                /** @description Sort order */
                sortOrder?: components["schemas"]["SortOrder"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ParticipantResponseDto"][];
                };
            };
        };
    };
    ParticipantsController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ParticipantCreationDto"] | components["schemas"]["ParticipantCreationDto"][];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ParticipantResponseDto"][];
                };
            };
            /** @description Unique id constraint violation */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponseDto"];
                };
            };
        };
    };
    ParticipantsController_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ParticipantResponseDto"];
                };
            };
            /** @description Entity not found exception */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponseDto"];
                };
            };
        };
    };
    ParticipantsController_delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ParticipantsController_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ParticipantMutationDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ParticipantResponseDto"];
                };
            };
        };
    };
    ParticipantsController_entryTemplates: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntryTemplateDto"][];
                };
            };
            /** @description Entity not found exception */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponseDto"];
                };
            };
        };
    };
    EntriesController_index: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntryResponseDto"][];
                };
            };
        };
    };
    EntriesController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EntryCreationDto"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntryResponseDto"];
                };
            };
            /** @description Unique name constraint violation */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponseDto"];
                };
            };
        };
    };
    EntriesController_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntryResponseDto"];
                };
            };
        };
    };
    EntriesController_delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    EntriesController_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EntryMutationDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntryResponseDto"];
                };
            };
        };
    };
    QuestionnairesController_index: {
        parameters: {
            query?: {
                /** @description Field to sort by */
                sortBy?: components["schemas"]["QuestionnaireSortableField"];
                /** @description Sort order */
                sortOrder?: components["schemas"]["SortOrder"];
                /** @description Filter by participant ID */
                participantId?: number;
                /** @description Filter by study title */
                studyTitle?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["QuestionnaireResponseDto"][];
                };
            };
        };
    };
    QuestionnairesController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["QuestionnaireCreationDto"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["QuestionnaireResponseDto"];
                };
            };
            /** @description Unique name constraint violation */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponseDto"];
                };
            };
        };
    };
    QuestionnairesController_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["QuestionnaireDetailResponseDto"];
                };
            };
        };
    };
    QuestionnairesController_delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    QuestionnairesController_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["QuestionnaireMutationDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["QuestionnaireResponseDto"];
                };
            };
        };
    };
    EntryLanguagesController_index: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntryLanguageResponseDto"][];
                };
            };
        };
    };
    EntryLanguagesController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EntryLanguageCreationDto"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntryLanguageResponseDto"];
                };
            };
            /** @description Unique name constraint violation */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponseDto"];
                };
            };
        };
    };
    EntryLanguagesController_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntryLanguageResponseDto"];
                };
            };
        };
    };
    EntryLanguagesController_delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    EntryLanguagesController_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EntryLanguageMutationDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntryLanguageResponseDto"];
                };
            };
        };
    };
    StudiesController_index: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StudyResponseDto"][];
                };
            };
        };
    };
    StudiesController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["StudyCreationDto"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StudyResponseDto"];
                };
            };
            /** @description Unique name constraint violation */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponseDto"];
                };
            };
        };
    };
    StudiesController_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StudyDetailResponseDto"];
                };
            };
            /** @description Entity not found exception */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponseDto"];
                };
            };
        };
    };
    StudiesController_delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    StudiesController_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["StudyMutationDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StudyResponseDto"];
                };
            };
        };
    };
    StudyParticipantsController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["StudyParticipantMutationDto"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StudyParticipantResponseDto"];
                };
            };
        };
    };
}
type ReadonlyArray<T> = [
    Exclude<T, undefined>
] extends [
    any[]
] ? Readonly<Exclude<T, undefined>> : Readonly<Exclude<T, undefined>[]>;
export const userCreationDtoRoleValues: ReadonlyArray<components["schemas"]["UserCreationDto"]["role"]> = ["ASSISTANT", "ADMIN"];
export const userResponseDtoRoleValues: ReadonlyArray<components["schemas"]["UserResponseDto"]["role"]> = ["ASSISTANT", "ADMIN"];
export const userMutationDtoRoleValues: ReadonlyArray<components["schemas"]["UserMutationDto"]["role"]> = ["ASSISTANT", "ADMIN"];
export const sessionResponseDtoRoleValues: ReadonlyArray<components["schemas"]["SessionResponseDto"]["role"]> = ["ASSISTANT", "ADMIN"];
export const exportTypeValues: ReadonlyArray<components["schemas"]["ExportType"]> = ["csv", "sql"];
export const participantSortableFieldValues: ReadonlyArray<components["schemas"]["ParticipantSortableField"]> = ["id", "birthday"];
export const sortOrderValues: ReadonlyArray<components["schemas"]["SortOrder"]> = ["ASC", "DESC"];
export const questionnaireSortableFieldValues: ReadonlyArray<components["schemas"]["QuestionnaireSortableField"]> = ["createdAt", "completedAt"];
